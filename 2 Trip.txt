import pandas as pd
import numpy as np

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import classification_report, confusion_matrix

df = pd.read_csv('2011-Q1-cabi-trip-history-data.csv')
df

address=df['End station'].unique()
print(address)
df = df.dropna()

from sklearn.preprocessing import LabelEncoder
gle = LabelEncoder()
address_labels = gle.fit_transform(df['End station'])
address_labels = gle.fit_transform(df['Start station'])
address_mappings = {index: label for index, label in
                  enumerate(gle.classes_)}
address_mappings

df['End station'] = address_labels

df.head()

gle = LabelEncoder()
bike_labels = gle.fit_transform(df['Bike#'])
bike_mappings = {index: label for index, label in
                  enumerate(gle.classes_)}
bike_mappings

df['Bike#'] = bike_labels

def duration_to_seconds(duration_str):
    parts = duration_str.replace('.', '').split()  # Remove periods and split
    total_seconds = 0
    for i in range(0, len(parts), 2):
        value_str = parts[i]
        # Extract only the numeric part of the value
        value = int(''.join(c for c in value_str if c.isdigit()))
        # Check if there's a unit available before accessing it
        if i + 1 < len(parts):  # Make sure we don't go out of bounds
            unit = parts[i + 1]
            if unit == 'h':
                total_seconds += value * 3600
            elif unit == 'min':
                total_seconds += value * 60
            elif unit == 'sec':
                total_seconds += value
    return total_seconds

df['Duration'] = df['Duration'].apply(duration_to_seconds)

X = df[['Duration','End station', 'Bike#']]
y = df['Member Type']

print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=0)

rf = RandomForestClassifier()
rf.fit(X_train, y_train)
y_pred = rf.predict(X_test)

score = metrics.accuracy_score(y_test, y_pred)
print("Accuracy of our model is: {:.1f}%".format(score*100))
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))